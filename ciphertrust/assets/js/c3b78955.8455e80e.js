"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1635],{8628:(e,t,r)=>{r.d(t,{A:()=>c});var a=r(6540),n=r(5556),i=r.n(n),o=r(3244),s=r(5489);const l=e=>{let{href:t}=e;return a.createElement("div",null,a.createElement(s.A,{href:t},a.createElement("button",{style:{backgroundColor:"#171515"},className:"p-2 my-4 rounded-md border-none cursor-pointer text-white"},"GitHub ",a.createElement(o.NSh,{className:"text-white"}))))},u=e=>{let{href:t}=e;return a.createElement("div",null,a.createElement(s.A,{href:t},a.createElement("button",{className:"p-2 my-4 rounded-md border-none cursor-pointer"},"View Demo ",a.createElement(o.ifP,null))))},p=e=>{let{href:t,demourl:r}=e;return a.createElement("div",{className:"flex flex-row justify-between"},t?a.createElement(l,{href:t}):a.createElement(a.Fragment,null),r?a.createElement(u,{href:r}):a.createElement(a.Fragment,null))};p.propTypes={href:i().string.isRequired,demourl:i().string};const c=p},6076:(e,t,r)=>{r.d(t,{A:()=>l});var a=r(6540),n=r(5556),i=r.n(n),o=r(8628);const s=e=>{let{embedId:t,github:r,demourl:n}=e;return a.createElement(a.Fragment,null,a.createElement("div",{className:"video-responsive"},a.createElement("iframe",{width:"853",height:"480",src:`https://www.youtube.com/embed/${t}`,frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,title:"Embedded youtube"})),a.createElement(o.A,{href:r,demourl:n}))};s.propTypes={embedId:i().string.isRequired};const l=s},4567:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=r(8168),n=(r(6540),r(5680)),i=r(6076);const o={sidebar_position:2},s="Build a TOTP service",l={unversionedId:"key-manager/build-a-totp-tutorial",id:"key-manager/build-a-totp-tutorial",title:"Build a TOTP service",description:"Use the top-notch security that CipherTrust Manager provides to build a time-based OTP service for your users' multi-factor authentication.",source:"@site/docs/key-manager/build-a-totp-tutorial.mdx",sourceDirName:"key-manager",slug:"/key-manager/build-a-totp-tutorial",permalink:"/ciphertrust/docs/key-manager/build-a-totp-tutorial",draft:!1,editUrl:"https://github.com/thalesgroup/ThalesGroup.github.io/tree/main/ciphertrust/docs/key-manager/build-a-totp-tutorial.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Encrypt RDS with AWS KMS",permalink:"/ciphertrust/docs/key-manager/aws-kms"},next:{title:"Connectors",permalink:"/ciphertrust/docs/category/connectors"}},u={},p=[{value:"How do Time-based OTPs work?",id:"how-do-time-based-otps-work",level:2},{value:"Single Point of Failiure",id:"single-point-of-failiure",level:3},{value:"How do we fix this \ud83d\udc49 Use a KEY MANAGER",id:"how-do-we-fix-this--use-a-key-manager",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Step 1 - Clone the demo",id:"step-1---clone-the-demo",level:3},{value:"Step 2 - Install the required packages",id:"step-2---install-the-required-packages",level:3},{value:"Step 3 - Configure your CipherTrust credentials in the .env file",id:"step-3---configure-your-ciphertrust-credentials-in-the-env-file",level:3},{value:"Step 3 - Run dev server",id:"step-3---run-dev-server",level:3},{value:"Breaking down the demo",id:"breaking-down-the-demo",level:2},{value:"Autheticating with CipherTrust Platform&#39;s APIs",id:"autheticating-with-ciphertrust-platforms-apis",level:3},{value:"Creating and Exporting Cryptographic keys",id:"creating-and-exporting-cryptographic-keys",level:3}],c={toc:p},d="wrapper";function h(e){let{components:t,...r}=e;return(0,n.yg)(d,(0,a.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"build-a-totp-service"},"Build a TOTP service"),(0,n.yg)("p",null,"Use the top-notch security that CipherTrust Manager provides to build a time-based OTP service for your users' multi-factor authentication."),(0,n.yg)(i.A,{embedId:"zhSdwbHamiI",github:"https://github.com/ThalesGroup/learn-ciphertrust/blob/main/learn/key-management/totp-demo/README.md",demourl:"https://glad-cat.sneakpeak.dev/demo",mdxType:"YoutubeEmbed"}),(0,n.yg)("p",null,"Time-based OTPs are a popular version of multi-factor authentication (MFA) used in many services today. The concept of generating them is simple, yet a single blunder could risk all your user's accounts."),(0,n.yg)("h2",{id:"how-do-time-based-otps-work"},"How do Time-based OTPs work?"),(0,n.yg)("p",null,(0,n.yg)("img",{parentName:"p",src:"https://assets.cdn.prod.twilio.com/images/totp-diagram_Cw3JZsA.width-800.png",alt:"Source Twilio.com"}),"\nImage Source: twilio.com"),(0,n.yg)("p",null,"Time-based OTP's work on a simple concept. When a users sets it up, the device (such as Google Authenticator, Authy, etc) and the server share a secret key. The key is then hashed with the time and the same code can be generated on the server and the user's client device."),(0,n.yg)("h3",{id:"single-point-of-failiure"},"Single Point of Failiure"),(0,n.yg)("p",null,"If a bad actor gains access to the servers or databases where you store all the secret keys used to generate the OTPs, now all your users accounts could get compromised!"),(0,n.yg)("h3",{id:"how-do-we-fix-this--use-a-key-manager"},"How do we fix this \ud83d\udc49 Use a KEY MANAGER"),(0,n.yg)("p",null,"Key Managers like the ",(0,n.yg)("a",{parentName:"p",href:"https://ciphertrust.io/"},"CipherTrust Platform")," are designed to store cryptographic keys very securely. This demo is an example where I use the CipherTrust platform to store keys and generate time based OTP codes."),(0,n.yg)("h2",{id:"quick-start"},"Quick Start"),(0,n.yg)("p",null,"This tutorial assumes that you've already setup the CipherTrust Platform. If not, check out our other ",(0,n.yg)("u",null,(0,n.yg)("a",{parentName:"p",href:"../category/deploy-ciphertrust-platform"},"step-by-step tutorials"))," that show you how to deploy CipherTrust."),(0,n.yg)("h3",{id:"step-1---clone-the-demo"},"Step 1 - Clone the demo"),(0,n.yg)("p",null,"Clone the demo project from the learn-ciphertrust repository"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"git clone https://github.com/ThalesGroup/learn-ciphertrust.git && cd learn-ciphertrust/learn/key-management/totp-demo/\n")),(0,n.yg)("h3",{id:"step-2---install-the-required-packages"},"Step 2 - Install the required packages"),(0,n.yg)("p",null,"The important packages that are necessary for this demo:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"jsonwebtoken")," - helps authenticate with the CipherTrust Platform's APIs."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"otplib")," - JavaScript implementation of the cryptographic timebased-otp standard (AKA - the library that calculates the one time code for the next 30 secs)")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"npm install\n")),(0,n.yg)("h3",{id:"step-3---configure-your-ciphertrust-credentials-in-the-env-file"},"Step 3 - Configure your CipherTrust credentials in the .env file"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"cp .env.example .env\n")),(0,n.yg)("p",null,"Now update the ",(0,n.yg)("inlineCode",{parentName:"p"},".env")," file with your CipherTrust credentials. "),(0,n.yg)("h3",{id:"step-3---run-dev-server"},"Step 3 - Run dev server"),(0,n.yg)("p",null,"Spin up the demo"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"npm run dev\n")),(0,n.yg)("h2",{id:"breaking-down-the-demo"},"Breaking down the demo"),(0,n.yg)("p",null,"Now that you've got the demo setup and played around with it, let's understand how it works. The demo application involves 3 important code-blocks."),(0,n.yg)("h3",{id:"autheticating-with-ciphertrust-platforms-apis"},"Autheticating with CipherTrust Platform's APIs"),(0,n.yg)("p",null,"Create a JWT (JSON Web Token) to be able to authenticate and communicate with the CipherTrust Platform's APIs."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/utils/create-jwt.js"',title:'"./src/utils/create-jwt.js"'},'import axios from "axios";\n\n// `createJWT` is a helper function that creates a JWT.\n// This function must only called on the server. \n// If you call it on the client-side you will expose your username and password in every request. DO NOT DO THIS. Just use it in a server-side API call.\nasync function createJWT() {\n    const response = await axios.post(\n        `${process.env.CTM_URL}/api/v1/auth/tokens`,\n        {\n            username: process.env.CTM_USERNAME,\n            password: process.env.CTM_PASSWORD,\n        }\n    ).catch(err => {\n        console.error(err);\n        res.status(502).send(err.toString());\n    });\n\n    const token = response.data.jwt;\n\n    return token\n}\n\nexport default createJWT;\n')),(0,n.yg)("admonition",{type:"info"},(0,n.yg)("p",{parentName:"admonition"},"Remember to replace ",(0,n.yg)("inlineCode",{parentName:"p"},"process.env.CTM_USERNAME")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"process.env.CTM_PASSWORD")," with your CipherTrust Manager username and password or update it in your the ",(0,n.yg)("inlineCode",{parentName:"p"},".env")," file")),(0,n.yg)("h3",{id:"creating-and-exporting-cryptographic-keys"},"Creating and Exporting Cryptographic keys"),(0,n.yg)("p",null,"To initiate the time-based OTP setup, a symmetric key (such as AES256) would be needed, so over here, we create and export a new key on the CipherTrust Platform using the API."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/utils/create-jwt.js"',title:'"./src/utils/create-jwt.js"'},'import axios from \'axios\';\n\nasync function createKey(keyname, jwt) {\n    // /api/create-key-proxy rewrites to https://<your_ciphertrust_url>/api/v1/vault/keys2\n    // This is done to avoid CORS errors thrown by the browser in the client side.\n    const response = await axios.post(\n        `/api/create-key-proxy`,\n        {\n            "name": keyname,\n            "algorithm": "aes",\n        },\n        {\n            headers: {\n                "Authorization": `Bearer ${jwt}`\n            }\n        }\n    ).catch(err => {\n        console.error("Error creating key: ", err);\n        return false\n    })\n\n    // Export key from CipherTrust Manager\n    // /api/export-key-proxy/<keyId> rewrites to https://<your_ciphertrust_url>/api/v1/vault/keys2/<keyId>/export\n    // This is done to avoid CORS errors thrown by the browser in the client side.\n    const exportResponse = await axios.post(\n        `/api/export-key-proxy/${keyname}`,\n        {},\n        {\n            headers: {\n                "Authorization": `Bearer ${jwt}`\n            }\n        }\n    ).catch(err => {\n        console.error("Error exporting key: ", err);\n        return false;\n    })\n\n    return exportResponse.data.material;\n    \n\n}\n\nexport { createKey };\n')),(0,n.yg)("p",null,"Then we load that key into a QR code using the ",(0,n.yg)("inlineCode",{parentName:"p"},"otplib")," library. Now we have finished setting up a TOTP service using the secure CipherTrust platform as our key manager."))}h.isMDXComponent=!0}}]);
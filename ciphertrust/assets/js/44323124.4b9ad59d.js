"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2522],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>d});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,d=p["".concat(l,".").concat(m)]||p[m]||g[m]||s;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4910:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(8168),a=(n(6540),n(5680));const s={sidebar_position:2},o="Transparent Encryption for Kubernetes",i={unversionedId:"connectors/cte-for-k8s",id:"connectors/cte-for-k8s",title:"Transparent Encryption for Kubernetes",description:"To get started with running CipherTrust's Transparent Encryption connector with Kubernetes, you would need to first have a deployed CipherTrust Manager instance. To learn about how to deploy CipherTrust Manager, check out our guides.",source:"@site/docs/connectors/cte-for-k8s.md",sourceDirName:"connectors",slug:"/connectors/cte-for-k8s",permalink:"/ciphertrust/docs/connectors/cte-for-k8s",draft:!1,editUrl:"https://github.com/thalesgroup/ThalesGroup.github.io/tree/main/ciphertrust/docs/connectors/cte-for-k8s.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Data Protection Gateway",permalink:"/ciphertrust/docs/connectors/data-encryption-in-transit-docker"}},l={},c=[{value:"Kuberenetes Setup",id:"kuberenetes-setup",level:2},{value:"Deploy CTE for Kubernetes",id:"deploy-cte-for-kubernetes",level:2},{value:"Configuring CipherTrust to talk to the Kubernetes Cluster",id:"configuring-ciphertrust-to-talk-to-the-kubernetes-cluster",level:2},{value:"Configure an NFS volume to protect your file system",id:"configure-an-nfs-volume-to-protect-your-file-system",level:2},{value:"Start the NFS service",id:"start-the-nfs-service",level:2},{value:"Configure the NFS volume in the Kubernetes cluster",id:"configure-the-nfs-volume-in-the-kubernetes-cluster",level:2},{value:"Deploy all YAML files",id:"deploy-all-yaml-files",level:2},{value:"Verify deployment status",id:"verify-deployment-status",level:3},{value:"Get Pod, PV, and PVC details",id:"get-pod-pv-and-pvc-details",level:3}],u={toc:c},p="wrapper";function g(e){let{components:t,...s}=e;return(0,a.yg)(p,(0,r.A)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"transparent-encryption-for-kubernetes"},"Transparent Encryption for Kubernetes"),(0,a.yg)("p",null,"To get started with running CipherTrust's Transparent Encryption connector with Kubernetes, you would need to first have a deployed CipherTrust Manager instance. To learn about how to deploy CipherTrust Manager, check out our ",(0,a.yg)("a",{parentName:"p",href:"/ciphertrust/docs/deploy/azure"},"guides"),"."),(0,a.yg)("h2",{id:"kuberenetes-setup"},"Kuberenetes Setup"),(0,a.yg)("p",null,"There are some pre-requisites we need to check. Our VM must have installed versions of:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"KVM"),(0,a.yg)("li",{parentName:"ul"},"Docker"),(0,a.yg)("li",{parentName:"ul"},"Kubernetes"),(0,a.yg)("li",{parentName:"ul"},"helm"),(0,a.yg)("li",{parentName:"ul"},"Minikube"),(0,a.yg)("li",{parentName:"ul"},"Git"),(0,a.yg)("li",{parentName:"ul"},"A Kubernetes cluster health monitoring tool")),(0,a.yg)("p",null,"Note: If you prefer, you could also perform this deployment with microK8s. This would remove the need to install services like MiniKube, KVM, Kubernetes, etc"),(0,a.yg)("h2",{id:"deploy-cte-for-kubernetes"},"Deploy CTE for Kubernetes"),(0,a.yg)("p",null,"Once you have confirmed you have the pre-requisites to deploy CTE for K8s. You can run a test setup with an ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/thalescpl-io/ciphertrust-transparent-encryption-kubernetes"},"open-source demo")," by Thales. Run,"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/thalescpl-io/ciphertrust-transparent-encryption-kubernetes.git\ncd ciphertrust-transparent-encryption-kubernetes/\n./deploy.sh\n")),(0,a.yg)("h2",{id:"configuring-ciphertrust-to-talk-to-the-kubernetes-cluster"},"Configuring CipherTrust to talk to the Kubernetes Cluster"),(0,a.yg)("p",null,"First, we need to generate a new registration token on the CipherTrust platform. We can do this by going to ",(0,a.yg)("inlineCode",{parentName:"p"},'Access Management -> Registration Token -> "Add Registration Token"')),(0,a.yg)("p",null,"We also need to enable the CipherTrust trial license, we can do this by going to ",(0,a.yg)("inlineCode",{parentName:"p"},'Licensing -> "Add CipherTrust Platform Evaluation"')," to enable the evaluation license."),(0,a.yg)("h1",{id:"setup-the-k8s-client"},"Setup the K8s Client"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Go to ",(0,a.yg)("inlineCode",{parentName:"p"},"Clients -> K8s Storage Group"),". Create a new K8s storage group.\n",(0,a.yg)("img",{alt:"Setup K8s Storage Group",src:n(375).A,width:"702",height:"465"}))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Go to ",(0,a.yg)("inlineCode",{parentName:"p"},"Policies -> Create Policy")," named ",(0,a.yg)("inlineCode",{parentName:"p"},"policy1"),"\n",(0,a.yg)("img",{alt:"Create a K8s Policy",src:n(6665).A,width:"558",height:"239"}),"\n")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Permissions to set"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Action: ",(0,a.yg)("inlineCode",{parentName:"li"},"all_ops")),(0,a.yg)("li",{parentName:"ul"},"Effect: ",(0,a.yg)("inlineCode",{parentName:"li"},"permit, audit, applykey")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Create a new ",(0,a.yg)("inlineCode",{parentName:"p"},"CBC-CS1")," key, and bind it to the resource set ",(0,a.yg)("inlineCode",{parentName:"p"},"cte-k8s-resource-set"),"\n",(0,a.yg)("img",{alt:"Policy list",src:n(6797).A,width:"558",height:"239"})))),(0,a.yg)("p",null,"Finally, click on Create Policy!"),(0,a.yg)("h2",{id:"configure-an-nfs-volume-to-protect-your-file-system"},"Configure an NFS volume to protect your file system"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Create a shared folder for the NFS")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir \u2013p /usr/nfs/cte-k8s\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Specify the share location to export")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"sudo vim  /etc/exports\n\n## Add the following line to the file\n/usr/nfs/cte-k8s *(rw,sync,no_root_squash)\n")),(0,a.yg)("p",null,"Save the file and run"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"sudo exportfs \u2013a\n")),(0,a.yg)("h2",{id:"start-the-nfs-service"},"Start the NFS service"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl enable nfs && \\\nsudo systemctl start nfs && \\\nsudo systemctl enable rpcbind && \\\nsudo systemctl start rpcbind\n")),(0,a.yg)("h2",{id:"configure-the-nfs-volume-in-the-kubernetes-cluster"},"Configure the NFS volume in the Kubernetes cluster"),(0,a.yg)("p",null,"Create the following files"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="nfs-pv.yml"',title:'"nfs-pv.yml"'},"apiVersion: v1\nkind: PersistentVolume\nmetadata:\n name: nfs-test-pv\nspec:\n capacity:\n storage: 1Gi\n accessModes:\n - ReadWriteMany\n storageClassName: nfs\n persistentVolumeReclaimPolicy: Retain\n mountOptions:\n - hard\n - nfsvers=4.0\n nfs:\n path: /usr/nfs/cte-k8s/\n server: 10.10.10.7\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="nfs-claim.yml"',title:'"nfs-claim.yml"'},"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: nfs-test-claim\nspec:\nstorageClassName: nfs\naccessModes:\n- ReadWriteMany\nresources:\nrequests:\nstorage: 1Gi\n")),(0,a.yg)("p",null,"Update the following files accordingly"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="cte-csi-storageclass.yaml"',title:'"cte-csi-storageclass.yaml"'},'apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n name: cte-k8s-storage-class\nprovisioner: csi.cte.cpl.thalesgroup.com\nreclaimPolicy: Delete\nvolumeBindingMode: Immediate\nallowVolumeExpansion: true\nparameters:\n # Domain name or IP address of the CiperTrust Manager (Required)\n key_manager_addr: <CM_INSTANCE_IP> #This IP address is the CM internal IP address\n # Name of the CipherTrust Manager K8s Storage Group. (Required)\n k8_storage_group: cte-k8s-storage-group\n # Kubernetes Secret with CM registration token (Required)\n registration_token_secret: demo #This name needs to be the same name of the registration token in CM\n\n client_description: "Azure CTE k8s client"\n # Time in minutes to wait before unregistering from the CiperTrust Manager\n # once all volumes have been unguarded. Parameter must be added as a string\n # integer value. Default "10" minute. (Optional)\n registration_period: "10"\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="cte-csi-regtoken.yaml"',title:'"cte-csi-regtoken.yaml"'},"apiVersion: v1\nkind: Secret\nmetadata:\n name: demo #This is the name of the registration tokens from CM dashboard for CTE k8s\ntype: Opaque\ndata:\n # This is a base64 encoded registration token. To generate:\n # echo <CM REGISTRATION TOKEN STRING> | base64 -w 0\n registration_token: <YOUR_REG_TOKEN>\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n name: cte-claim\n annotations:\n # CTE for Kubernetes GuardPolicy name. This GuardPolicy is located on the\n # CipherTrust Manager and should match a policy name available on the\n # storage class for this PVC. (Required)\n csi.cte.cpl.thalesgroup.com/policy: policy1\n # Name of the unprotected source PVC that will be protected by this CTE-PVC.\n # (Required)\n csi.cte.cpl.thalesgroup.com/source_pvc: nfs-test-claim\nspec:\n storageClassName: cte-k8s-storage-class\n accessModes:\n - ReadWriteMany\n resources:\n    requests:\n    # This parameter is required by Kubernetes but ignored by CTE-CSI.\n    storage: 1Gi\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="cte-csi-demo-pod.yml"',title:'"cte-csi-demo-pod.yml"'},'apiVersion: v1\nkind: Pod\nmetadata:\n name: cte-csi-demo\nspec:\n volumes:\n - name: test-vol\n persistentVolumeClaim:\n claimName: cte-claim\n containers:\n - name: ubuntu\n image: ubuntu\n volumeMounts:\n - mountPath: "/data"\n name: test-vol\n command:\n - "sleep"\n - "604800"\n imagePullPolicy: IfNotPresent\n restartPolicy: Always\n')),(0,a.yg)("h2",{id:"deploy-all-yaml-files"},"Deploy all YAML files"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f nfs-pv.yaml\nkubectl apply -f nfs-claim.yaml\nkubectl apply -f cte-csi-regtoken.yaml\nkubectl apply -f cte-csi-storageclass.yaml\nkubectl apply -f cte-csi-claim.yaml\nkubectl apply -f cte-csi-demo-pod.yaml\n")),(0,a.yg)("h3",{id:"verify-deployment-status"},"Verify deployment status"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl get all\nkubectl get pod, pv, pvc\nkubectl get pod \u2013namespace=kube-system\n")),(0,a.yg)("h3",{id:"get-pod-pv-and-pvc-details"},"Get Pod, PV, and PVC details"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl describe pod <pod name>\nkubectl describe pv <pv name>\nkubectl describe pvc <pvc name>\n")),(0,a.yg)("p",null,"Now your data should be secured by CTE for K8s connector. You can verify this by going into the pod and creating a new file in the ",(0,a.yg)("inlineCode",{parentName:"p"},"/data")," folder and verify that it is encrypted on the NFS from your local system."))}g.isMDXComponent=!0},6665:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/new-k8s-sg-policy-d9c751a72f8515db765d7e880e41c370.png"},6797:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/policy-list-k8s-b26ea62cf829c18779f07cef8286f18b.png"},375:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/setup-k8s-storage-group-efa1dac121e1d767c6af28b1c9822af4.png"}}]);